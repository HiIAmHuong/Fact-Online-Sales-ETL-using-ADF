{
	"name": "DimCustomer",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Customer",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "CustomerDemographics",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "CustomerIndividual",
						"type": "DatasetReference"
					},
					"name": "source3"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DimCustomer",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "sort1"
				},
				{
					"name": "sort2"
				},
				{
					"name": "sort3"
				},
				{
					"name": "join1"
				},
				{
					"name": "sort4"
				},
				{
					"name": "join2"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select1"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerID as integer,",
				"          PersonID as integer,",
				"          StoreID as integer,",
				"          TerritoryID as integer,",
				"          AccountNumber as string,",
				"          rowguid as string,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source1",
				"source(output(",
				"          BusinessEntityID as integer,",
				"          TotalPurchaseYTD as decimal(19,4),",
				"          DateFirstPurchase as timestamp,",
				"          BirthDate as timestamp,",
				"          MaritalStatus as string,",
				"          YearlyIncome as string,",
				"          Gender as string,",
				"          TotalChildren as integer,",
				"          NumberChildrenAtHome as integer,",
				"          Education as string,",
				"          Occupation as string,",
				"          HomeOwnerFlag as boolean,",
				"          NumberCarsOwned as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source2",
				"source(output(",
				"          BusinessEntityID as integer,",
				"          Title as string,",
				"          FirstName as string,",
				"          MiddleName as string,",
				"          LastName as string,",
				"          Suffix as string,",
				"          PhoneNumber as string,",
				"          PhoneNumberType as string,",
				"          EmailAddress as string,",
				"          EmailPromotion as integer,",
				"          AddressType as string,",
				"          AddressLine1 as string,",
				"          AddressLine2 as string,",
				"          City as string,",
				"          StateProvinceName as string,",
				"          PostalCode as string,",
				"          CountryRegionName as string,",
				"          Demographics as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source3",
				"source1 sort(asc(CustomerID, true)) ~> sort1",
				"source2 sort(asc(BusinessEntityID, true)) ~> sort2",
				"source3 sort(asc(BusinessEntityID, true)) ~> sort3",
				"sort2, select1 join(source2@BusinessEntityID == select1@BusinessEntityID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 sort(asc(source2@BusinessEntityID, true)) ~> sort4",
				"sort1, sort4 join(CustomerID == source2@BusinessEntityID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 derive(CustomerKey = 1000000 + CustomerID,",
				"          ValidFrom = currentDate(),",
				"          ValidTo = addMonths(currentDate(),120)) ~> derivedColumn1",
				"sort3 select(mapColumn(",
				"          BusinessEntityID,",
				"          Title,",
				"          FirstName,",
				"          MiddleName,",
				"          LastName,",
				"          Suffix,",
				"          PhoneNumber,",
				"          PhoneNumberType,",
				"          EmailAddress,",
				"          EmailPromotion,",
				"          City,",
				"          StateProvinceName,",
				"          PostalCode,",
				"          CountryRegionName,",
				"          Demographics",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"derivedColumn1 aggregate(groupBy(CustomerID,",
				"          TerritoryID,",
				"          AccountNumber,",
				"          BirthDate,",
				"          MaritalStatus,",
				"          YearlyIncome,",
				"          Gender,",
				"          TotalChildren,",
				"          NumberChildrenAtHome,",
				"          Education,",
				"          Occupation,",
				"          HomeOwnerFlag,",
				"          NumberCarsOwned,",
				"          Title,",
				"          FirstName,",
				"          LastName,",
				"          MiddleName,",
				"          Suffix,",
				"          PhoneNumber,",
				"          EmailAddress,",
				"          StateProvinceName,",
				"          CountryRegionName,",
				"          CustomerKey,",
				"          EmailPromotion,",
				"          ValidFrom,",
				"          ValidTo),",
				"     count = count()) ~> aggregate1",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CustomerID as integer,",
				"          DateFirstPurchase as timestamp,",
				"          BirthDate as timestamp,",
				"          MaritalStatus as string,",
				"          YearlyIncome as string,",
				"          Gender as string,",
				"          TotalChildren as integer,",
				"          NumberChildrenAtHome as integer,",
				"          Education as string,",
				"          Occupation as string,",
				"          HomeOwnerFlag as boolean,",
				"          NumberCarsOwned as integer,",
				"          FirstName as string,",
				"          MiddleName as string,",
				"          LastName as string,",
				"          Suffix as string,",
				"          PhoneNumber as string,",
				"          PhoneNumberType as string,",
				"          EmailAddress as string,",
				"          EmailPromotion as integer,",
				"          AddressType as string,",
				"          AddressLine1 as string,",
				"          AddressLine2 as string,",
				"          City as string,",
				"          StateProvinceName as string,",
				"          PostalCode as string,",
				"          CountryRegionName as string,",
				"          ValidFrom as date,",
				"          ValidTo as date,",
				"          isActive as integer,",
				"          CustomerKey as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          CustomerKey,",
				"          CustomerID,",
				"          BirthDate,",
				"          MaritalStatus,",
				"          YearlyIncome,",
				"          Gender,",
				"          TotalChildren,",
				"          NumberChildrenAtHome,",
				"          Education,",
				"          Occupation,",
				"          HomeOwnerFlag,",
				"          NumberCarsOwned,",
				"          FirstName,",
				"          MiddleName,",
				"          LastName,",
				"          Suffix,",
				"          PhoneNumber,",
				"          EmailAddress,",
				"          EmailPromotion,",
				"          StateProvinceName,",
				"          CountryRegionName,",
				"          ValidFrom,",
				"          ValidTo",
				"     )) ~> sink1"
			]
		}
	}
}