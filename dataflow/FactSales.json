{
	"name": "FactSales",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SalesOrderDetail",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "SalesOrderHeader",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "DimProduct",
						"type": "DatasetReference"
					},
					"name": "DimProduct"
				},
				{
					"dataset": {
						"referenceName": "DimPromotion",
						"type": "DatasetReference"
					},
					"name": "DimPromotion"
				},
				{
					"dataset": {
						"referenceName": "DimCustomer",
						"type": "DatasetReference"
					},
					"name": "DimCustomer"
				},
				{
					"dataset": {
						"referenceName": "DimSalesReason",
						"type": "DatasetReference"
					},
					"name": "DimSalesReason"
				},
				{
					"dataset": {
						"referenceName": "DimTerritory",
						"type": "DatasetReference"
					},
					"name": "DimTerritory"
				},
				{
					"dataset": {
						"referenceName": "DimTime",
						"type": "DatasetReference"
					},
					"name": "DimtTime"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "FactSales",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "sort1"
				},
				{
					"name": "sort2"
				},
				{
					"name": "join1"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "select1"
				},
				{
					"name": "select2"
				},
				{
					"name": "select3"
				},
				{
					"name": "select4"
				},
				{
					"name": "select5"
				},
				{
					"name": "select6"
				},
				{
					"name": "select7"
				},
				{
					"name": "lookup2"
				},
				{
					"name": "lookup3"
				},
				{
					"name": "lookup4"
				},
				{
					"name": "lookup5"
				},
				{
					"name": "lookup6"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          SalesOrderID as integer,",
				"          SalesOrderDetailID as integer,",
				"          CarrierTrackingNumber as string,",
				"          OrderQty as integer,",
				"          ProductID as integer,",
				"          SpecialOfferID as integer,",
				"          UnitPrice as decimal(19,4),",
				"          UnitPriceDiscount as decimal(19,4),",
				"          LineTotal as decimal(38,6),",
				"          rowguid as string,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source1",
				"source(output(",
				"          SalesOrderID as integer,",
				"          RevisionNumber as integer,",
				"          OrderDate as timestamp,",
				"          DueDate as timestamp,",
				"          ShipDate as timestamp,",
				"          Status as integer,",
				"          OnlineOrderFlag as boolean,",
				"          SalesOrderNumber as string,",
				"          PurchaseOrderNumber as string,",
				"          AccountNumber as string,",
				"          CustomerID as integer,",
				"          SalesPersonID as integer,",
				"          TerritoryID as integer,",
				"          BillToAddressID as integer,",
				"          ShipToAddressID as integer,",
				"          ShipMethodID as integer,",
				"          CreditCardID as integer,",
				"          CreditCardApprovalCode as string,",
				"          CurrencyRateID as integer,",
				"          SubTotal as decimal(19,4),",
				"          TaxAmt as decimal(19,4),",
				"          Freight as decimal(19,4),",
				"          TotalDue as decimal(19,4),",
				"          Comment as string,",
				"          rowguid as string,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source2",
				"source(output(",
				"          ProductKey as integer,",
				"          ProductSubcategoryKey as integer,",
				"          ProductID as integer,",
				"          ProductName as string,",
				"          Color as string,",
				"          Size as string,",
				"          Weight as decimal(8,2),",
				"          ProductLine as string,",
				"          Class as string,",
				"          Style as string,",
				"          ListPrice as decimal(19,4),",
				"          SellStartDate as timestamp,",
				"          SellEndDate as timestamp,",
				"          ValidFrom as date,",
				"          ValidTo as date,",
				"          isActive as integer,",
				"          StandardCost as decimal(18,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DimProduct",
				"source(output(",
				"          PromotionKey as integer,",
				"          PromotionID as integer,",
				"          PromotionName as string,",
				"          DiscountPct as decimal(19,4),",
				"          Type as string,",
				"          Category as string,",
				"          StartDate as timestamp,",
				"          EndDate as timestamp,",
				"          MinQty as integer,",
				"          MaxQty as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DimPromotion",
				"source(output(",
				"          CustomerKey as integer,",
				"          CustomerID as integer,",
				"          DateFirstPurchase as timestamp,",
				"          BirthDate as timestamp,",
				"          MaritalStatus as string,",
				"          YearlyIncome as string,",
				"          Gender as string,",
				"          TotalChildren as integer,",
				"          NumberChildrenAtHome as integer,",
				"          Education as string,",
				"          Occupation as string,",
				"          HomeOwnerFlag as boolean,",
				"          NumberCarsOwned as integer,",
				"          FirstName as string,",
				"          MiddleName as string,",
				"          LastName as string,",
				"          Suffix as string,",
				"          PhoneNumber as string,",
				"          PhoneNumberType as string,",
				"          EmailAddress as string,",
				"          EmailPromotion as integer,",
				"          AddressType as string,",
				"          AddressLine1 as string,",
				"          AddressLine2 as string,",
				"          City as string,",
				"          StateProvinceName as string,",
				"          PostalCode as string,",
				"          CountryRegionName as string,",
				"          ValidFrom as date,",
				"          ValidTo as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DimCustomer",
				"source(output(",
				"          SalesReasonKey as integer,",
				"          SalesReasonID as integer,",
				"          SalesReasonName as string,",
				"          ReasonType as string,",
				"          ValidFrom as date,",
				"          ValidTo as date,",
				"          isActive as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DimSalesReason",
				"source(output(",
				"          TerritoryKey as integer,",
				"          TerritoryID as integer,",
				"          CountryRegionCode as string,",
				"          TerritoryName as string,",
				"          CountryRegionName as string,",
				"          Group as string,",
				"          ValidFrom as date,",
				"          ValidTo as date,",
				"          isActive as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DimTerritory",
				"source(output(",
				"          DateKey as integer,",
				"          Date as timestamp,",
				"          DateString as string,",
				"          Day as integer,",
				"          DayofYear as integer,",
				"          DayofWeek as integer,",
				"          DayofWeekName as string,",
				"          Week as integer,",
				"          Month as integer,",
				"          MonthName as string,",
				"          Quarter as integer,",
				"          Year as integer,",
				"          IsWeekend as boolean,",
				"          IsLeapYear as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DimtTime",
				"source1 sort(asc(SalesOrderID, true)) ~> sort1",
				"source2 sort(asc(SalesOrderID, true)) ~> sort2",
				"sort1, sort2 join(source1@SalesOrderID == source2@SalesOrderID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"select1, select2 lookup(select1@ProductID == select2@ProductID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"join1 select(mapColumn(",
				"          SalesOrderID = source1@SalesOrderID,",
				"          SalesOrderDetailID,",
				"          OrderQty,",
				"          ProductID,",
				"          SpecialOfferID,",
				"          RevisionNumber,",
				"          UnitPrice,",
				"          UnitPriceDiscount,",
				"          LineTotal,",
				"          OrderDate,",
				"          DueDate,",
				"          ShipDate,",
				"          OnlineOrderFlag,",
				"          CustomerID,",
				"          TerritoryID,",
				"          TaxAmtTotalOrder = TaxAmt,",
				"          FreightTotalOrder = Freight",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"DimProduct select(mapColumn(",
				"          ProductKey,",
				"          ProductID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"DimPromotion select(mapColumn(",
				"          PromotionKey,",
				"          PromotionID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"DimCustomer select(mapColumn(",
				"          CustomerKey,",
				"          CustomerID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"DimSalesReason select(mapColumn(",
				"          SalesReasonKey,",
				"          SalesReasonID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select5",
				"DimTerritory select(mapColumn(",
				"          TerritoryKey,",
				"          TerritoryID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select6",
				"DimtTime select(mapColumn(",
				"          DateKey,",
				"          Date,",
				"          DateString",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select7",
				"lookup1, select3 lookup(SpecialOfferID == PromotionID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup2",
				"lookup2, select4 lookup(select1@CustomerID == select4@CustomerID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup3",
				"lookup3, select5 lookup(RevisionNumber == SalesReasonID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup4",
				"lookup4, select6 lookup(select1@TerritoryID == select6@TerritoryID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup5",
				"lookup5, select7 lookup(OrderDate == Date,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup6",
				"lookup6 derive(ValidFrom = currentDate(),",
				"          ValidTo = addMonths(currentDate(),120)) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          SalesOrderID as integer,",
				"          ProductKey as integer,",
				"          PromotionKey as integer,",
				"          CustomerKey as integer,",
				"          SalesReasonKey as integer,",
				"          TerritoryKey as integer,",
				"          DateKey as integer,",
				"          OnlineOrderFlag as boolean,",
				"          OrderQty as integer,",
				"          UnitPrice as decimal(19,4),",
				"          UnitPriceDiscount as decimal(19,4),",
				"          LineTotal as decimal(38,6),",
				"          TaxAmtTotalOrder as decimal(19,4),",
				"          FreightTotalOrder as decimal(19,4),",
				"          OrderDate as timestamp,",
				"          DueDate as timestamp,",
				"          ShipDate as timestamp,",
				"          ValidFrom as date,",
				"          ValidTo as date",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          SalesOrderID,",
				"          ProductKey,",
				"          PromotionKey,",
				"          CustomerKey,",
				"          SalesReasonKey,",
				"          TerritoryKey,",
				"          DateKey,",
				"          OnlineOrderFlag,",
				"          OrderQty,",
				"          UnitPrice,",
				"          UnitPriceDiscount,",
				"          LineTotal,",
				"          TaxAmtTotalOrder,",
				"          FreightTotalOrder,",
				"          OrderDate,",
				"          DueDate,",
				"          ShipDate,",
				"          ValidFrom,",
				"          ValidTo",
				"     )) ~> sink1"
			]
		}
	}
}